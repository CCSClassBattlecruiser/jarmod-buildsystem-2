buildscript {
    repositories {
        mavenLocal()
        maven { url = 'http://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
		maven {url 'http://plugins.gradle.org/m2/'} // For debug purposes
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
		classpath 'com.github.abrarsyed.jastyle:jAstyle:1.3'
		classpath 'com.google.code.gson:gson:2.8.0' // because groovy JsonGenerator doesn't exist wtf
		classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3" // For debug purposes
    }
}

import com.github.abrarsyed.jastyle.ASFormatter;
import com.github.abrarsyed.jastyle.OptParser;
import com.google.gson.GsonBuilder
import groovy.json.JsonSlurper
import java.util.zip.*
import net.minecraftforge.gradle.patcher.task.TaskExtractMCPData

def settings = new JsonSlurper().parseText(file('conf/settings.json').text)

apply plugin: 'eclipse'
apply plugin: "com.dorongold.task-tree" // For debug purposes

group = 'com.example'
version = '1.0'

project(':mcp') {
    apply plugin: 'net.minecraftforge.gradle.forgedev.mcp'
    mcp {
        config = 'de.oceanlabs.mcp:mcp_config:' + settings.mcpconfig + '@zip'
        pipeline = settings.pipeline
    }
}

project(':clean') {
    evaluationDependsOn(':mcp')
    apply plugin: 'eclipse'
    apply plugin: 'net.minecraftforge.gradle.forgedev.patcher'
    repositories {
        mavenCentral()
    }
    patcher {
        parent = project(':mcp')
        patchedSrc = file('src/main/java')
        mappings channel: 'snapshot', version: settings.mappings
        mcVersion = settings.mcversion
    }
    task runclient(type: JavaExec) {
        doFirst {
            mkdir 'runclient'
        }
        classpath sourceSets.main.runtimeClasspath
        args = ['--accessToken', '0', '--version', '1.13']
        main 'net.minecraft.client.main.Main'
        workingDir 'runclient'
    }
}

project(':' + settings.modname) {
    evaluationDependsOn(':clean')
    apply plugin: 'eclipse'
    apply plugin: 'net.minecraftforge.gradle.forgedev.patcher'
    sourceSets {
        main {
            java {
                srcDir "$rootDir/src/main/java"
            }
            resources {
                srcDir "$rootDir/src/main/resources"
            }
        }
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
    patcher {
        parent = project(':clean')
        patches = file("$rootDir/patches")
        patchedSrc = file('src/main/java')
        //accessTransformer = file("$rootDir/src/main/resources/forge_at.cfg")
        srgPatches = false
        clientRun {
            main = settings.clientmain
			/*
            environment = [
                //target: 'fmldevclient'
            ]
			*/
            properties = [
                //target: 'fmldevclient',
                assetDirectory: downloadAssets.output
            ]
        }
        serverRun {
            main = settings.servermain
			/*
            environment = [
                //target: 'fmldevserver'
            ]
			*/
        }
    }
    applyPatches {
        canonicalizeAccess true
        canonicalizeWhitespace true
        maxFuzz 3
    }
    dependencies {
		/*
        implementation 'net.minecraft:client:1.13:extra'
        implementation 'cpw.mods:modlauncher:0.1.0-rc.3' //Pinned until cpw fixes getCommonSupertype
        implementation 'net.minecraftforge:accesstransformers:0.10+:shadowed'
        implementation 'net.minecraftforge:eventbus:0.1+:service'
        implementation 'net.minecraftforge:forgespi:0.1+'
        implementation 'net.minecraftforge:coremods:0.1+'
        implementation 'com.electronwill.night-config:core:3.4.0'
        implementation 'com.electronwill.night-config:toml:3.4.0'
        implementation 'org.jline:jline:3.5.1'
        implementation 'org.apache.maven:maven-artifact:3.5.3'
        implementation 'java3d:vecmath:1.5.2'
		*/
    }

    configurations {
        ecj
    }

    dependencies {
        ecj 'org.eclipse.jdt.core.compiler:ecj:4.6.1'
    }

    compileJava {
        options.fork = true
        options.failOnError = false
        options.forkOptions.with {
            executable = 'java'
            jvmArgs = ['-classpath', project.configurations.ecj.asPath, 'org.eclipse.jdt.internal.compiler.batch.Main', '-nowarn', '-proceedOnError', '-preserveAllLocals', '-parameters']
        }
    }

    task runclient(type: JavaExec, dependsOn: [":" + settings.modname + ":downloadAssets", ":" + settings.modname + ":extractNatives"]) {
        doFirst {
            mkdir 'runclient'
        }
        doFirst {
            copy {
                from sourceSets.main.resources
                into "$buildDir/classes/java/main"
            }
        }
//        jvmArgs = ['-verbose:class']
        classpath sourceSets.main.runtimeClasspath
        main settings.clientmain
        systemProperties = [
                "org.lwjgl.util.Debug": "true",
                "org.lwjgl.util.DebugLoader": "true"
        ]
        environment += [
                //target:'fmldevclient',
                assetDirectory: file("${gradle.getGradleUserHomeDir()}/caches/forge_gradle/assets/"),
                nativesDirectory: extractNatives.output
        ]
        workingDir 'runclient'
    }

    task runserver(type: JavaExec) {
        doFirst {
            mkdir 'runserver'
        }
        classpath sourceSets.main.runtimeClasspath
        main settings.servermain
        args 'nogui'
        //environment target:'fmldevserver'
        workingDir 'runserver'
    }
}

//evaluationDependsOnChildren()
task setup() {
    dependsOn ':clean:extractMapped'
    dependsOn ':' + settings.modname + ':extractMapped' //These must be strings so that we can do lazy resolution. Else we need evaluationDependsOnChildren above
}

// ===== FIXES ===== //

// Fix recompilation requiring extractSrg output
setup.dependsOn ':clean:extractSrg'

// Fix https://github.com/MinecraftForge/ForgeGradle/issues/517 - FG3 server pipeline missing download version JSON
// Also fix recompile error on server due to mcp.client.Start being present
if (settings.pipeline == 'server') {
	project(':mcp') {
		downloadConfig.output = file('build/mcp_config_broken.zip')
		task fixMcpConfig {
			dependsOn downloadConfig
			inputs.file downloadConfig.output
			outputs.file 'build/mcp_config.zip'
			doLast {
				def zipIn = new ZipFile(file(downloadConfig.output))
				def zipOut = new ZipOutputStream(new FileOutputStream(file('build/mcp_config.zip')))
				zipIn.entries().each { entryIn ->
					def entryOut = new ZipEntry(entryIn.getName())
					zipOut.putNextEntry(entryOut)
					if (entryIn.getName() == 'config.json') {
						def cfg = new JsonSlurper().parse(zipIn.getInputStream(entryIn))
						cfg.steps.server.add(1, [type: 'downloadJson'])
						zipOut << new GsonBuilder().setPrettyPrinting().create().toJson(cfg)
					} else if (!entryIn.getName().startsWith('config/inject/mcp/client/')) {
						zipOut << zipIn.getInputStream(entryIn)
					}
					zipOut.closeEntry()
				}
				zipIn.close()
				zipOut.close()
			}
		}
		loadConfig.dependsOn fixMcpConfig
	}
}

// Fix formatting, optionally
if (settings.reformat) {
	project(':mcp') {
		task reformat {
			dependsOn setupMCP
			inputs.file setupMCP.output
			outputs.file 'build/reformat/output.zip'
			doLast {
				def formatter = new ASFormatter()
				formatter.setUseProperInnerClassIndenting(false)
				def parser = new OptParser(formatter)
				parser.parseOptionFile(rootProject.file('conf/astyle.cfg'))
				def zipIn = new ZipFile(file(setupMCP.output))
				def zipOut = new ZipOutputStream(new FileOutputStream(file('build/reformat/output.zip')))
				zipIn.entries().each { entryIn ->
					def entryOut = new ZipEntry(entryIn.getName())
					zipOut.putNextEntry(entryOut)
					if (entryIn.getName().endsWith('.java') && !entryIn.getName().endsWith("package-info.java")) {
						StringWriter sw = new StringWriter()
						try {
							formatter.format(new InputStreamReader(zipIn.getInputStream(entryIn)), sw)
							zipOut << new StringBufferInputStream(sw.toString())
						} catch (RuntimeException e) {
							println("Failed to reformat " + entryIn.getName())
							zipOut << zipIn.getInputStream(entryIn)
						}
					} else {
						zipOut << zipIn.getInputStream(entryIn)
					}
					zipOut.closeEntry()
				}
				zipIn.close()
				zipOut.close()
			}
		}
	}
	project(':clean') {
		applyPatches.dependsOn project(':mcp').reformat
		applyPatches.setClean(project(':mcp').file('build/reformat/output.zip'))
	}
}

// Fix reobf error due to local variable signatures (with lambdas?). Apply to both clean and modded to keep the classes the same
for (def projname in [':clean', ':' + settings.modname]) {
	project(projname) {
		def reobfArgs = []
		reobfJar.args.each {reobfArgs << it}
		reobfArgs << '--kill-lvt'
		reobfJar.args = reobfArgs.toArray([] as String[])
	}
}
